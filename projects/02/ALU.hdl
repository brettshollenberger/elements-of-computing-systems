// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Zero16 is a mux-type function that either zeroes the input or returns the original input
    Zero16(in=x, sel=zx, out=zeroedx);
    Zero16(in=y, sel=zy, out=zeroedy);

    // MuxBitwiseNegate16 is a mux-type function that either bitwise negates or returns the original input
    MuxBitwiseNegate16(in=zeroedx, sel=nx, out=negatedx);
    MuxBitwiseNegate16(in=zeroedy, sel=ny, out=negatedy);

    // Perform both the addition and boolean and to select from; assuming these chips are strictly
    // evaluated, there seems to be no way not to perform both operations (to short-circuit a mux without evaluating both inputs)
    Add16(a=negatedx, b=negatedy, out=addition);
    And16(a=negatedx, b=negatedy, out=booleanand);

    // Select the intended computation
    Mux16(a=booleanand, b=addition, sel=f, out=fncomputation);

    // Possibly negate the result, and assign the outputs to internal pins that can be analyzed
    // (the output pin cannot be used as input to other internal chips)
    MuxBitwiseNegate16(in=fncomputation, sel=no, out=out,out=outputForAnalysis,out[15]=negationBit);

    // If the output == 0, set zr = 1
    Equal16(a=outputForAnalysis, b[0..15]=false, out=zr);

    // If the first bit of the output is 1, two's complement addition makes it negative; set ng appropriately
    Equal(a=negationBit, b=true, out=ng);
}
